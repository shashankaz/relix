name: Build and Deploy to ECS

on:
  push:
    branches: [main]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v3
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Log in to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build and push Docker image to ECR
      env:
        IMAGE_URI: ${{ secrets.ECR_REPOSITORY_URI }}:latest
        VITE_UNSPLASH_CLIENT_ID: ${{ secrets.VITE_UNSPLASH_CLIENT_ID }}
        VITE_BACKEND_URL: ${{ secrets.VITE_BACKEND_URL }}
      run: |
        docker build \
          --build-arg VITE_UNSPLASH_CLIENT_ID=$VITE_UNSPLASH_CLIENT_ID \
          --build-arg VITE_BACKEND_URL=$VITE_BACKEND_URL \
          -t my-app .

        docker tag my-app:latest $IMAGE_URI
        docker push $IMAGE_URI

    - name: Render new ECS task definition
      id: render-task
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ecs-task-definition.json
        container-name: relix-container
        image: ${{ secrets.ECR_REPOSITORY_URI }}:latest

    - name: Deploy to ECS service
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.render-task.outputs.task-definition }}
        service: relix-task-service-at4xw6x4
        cluster: whimsical-shark-q168bm
        wait-for-service-stability: true
